// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: flagsgroup.sql

package queries

import (
	"context"
)

const createFlagsGroup = `-- name: CreateFlagsGroup :one
INSERT INTO flags_groups(name, org_id, folder_id)
VALUES ($1, $2, $3)
RETURNING uuid, id, name, org_id, folder_id, created_at
`

type CreateFlagsGroupParams struct {
	Name     string `json:"name"`
	OrgID    *int32 `json:"-"`
	FolderID *int32 `json:"-"`
}

func (q *Queries) CreateFlagsGroup(ctx context.Context, arg CreateFlagsGroupParams) (FlagsGroup, error) {
	row := q.db.QueryRow(ctx, createFlagsGroup, arg.Name, arg.OrgID, arg.FolderID)
	var i FlagsGroup
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.Name,
		&i.OrgID,
		&i.FolderID,
		&i.CreatedAt,
	)
	return i, err
}

const getFlagsGroupByUUID = `-- name: GetFlagsGroupByUUID :one
SELECT uuid, id, name, org_id, folder_id, created_at FROM flags_groups
WHERE uuid = $1
`

func (q *Queries) GetFlagsGroupByUUID(ctx context.Context, uuid string) (FlagsGroup, error) {
	row := q.db.QueryRow(ctx, getFlagsGroupByUUID, uuid)
	var i FlagsGroup
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.Name,
		&i.OrgID,
		&i.FolderID,
		&i.CreatedAt,
	)
	return i, err
}

const getFolderFlagsGroup = `-- name: GetFolderFlagsGroup :many
SELECT uuid, id, name, org_id, folder_id, created_at
FROM flags_groups
WHERE folder_id = $1
`

func (q *Queries) GetFolderFlagsGroup(ctx context.Context, folderID *int32) ([]FlagsGroup, error) {
	rows, err := q.db.Query(ctx, getFolderFlagsGroup, folderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlagsGroup
	for rows.Next() {
		var i FlagsGroup
		if err := rows.Scan(
			&i.Uuid,
			&i.ID,
			&i.Name,
			&i.OrgID,
			&i.FolderID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrgFlagsGroup = `-- name: GetOrgFlagsGroup :many
SELECT uuid, id, name, org_id, folder_id, created_at
FROM flags_groups
WHERE org_id = $1
`

func (q *Queries) GetOrgFlagsGroup(ctx context.Context, orgID *int32) ([]FlagsGroup, error) {
	rows, err := q.db.Query(ctx, getOrgFlagsGroup, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FlagsGroup
	for rows.Next() {
		var i FlagsGroup
		if err := rows.Scan(
			&i.Uuid,
			&i.ID,
			&i.Name,
			&i.OrgID,
			&i.FolderID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
