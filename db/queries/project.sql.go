// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: project.sql

package queries

import (
	"context"
)

const addProjectMember = `-- name: AddProjectMember :exec
INSERT INTO project_members(user_id, project_id)
VALUES ($1, $2)
`

type AddProjectMemberParams struct {
	UserID    int64 `json:"user_id"`
	ProjectID int64 `json:"project_id"`
}

func (q *Queries) AddProjectMember(ctx context.Context, arg AddProjectMemberParams) error {
	_, err := q.db.Exec(ctx, addProjectMember, arg.UserID, arg.ProjectID)
	return err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects(name, owner_id, org_id)
VALUES ($1, $2, $3)
RETURNING id, name, uuid, org_id, owner_id, created_at, updated_at
`

type CreateProjectParams struct {
	Name    string `json:"name"`
	OwnerID int64  `json:"owner_id"`
	OrgID   int64  `json:"org_id"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Name, arg.OwnerID, arg.OrgID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Uuid,
		&i.OrgID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT id, name, uuid, org_id, owner_id, created_at, updated_at
FROM projects
WHERE id = $1
`

func (q *Queries) GetProject(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Uuid,
		&i.OrgID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProjects = `-- name: GetUserProjects :many
SELECT p.id, p.name, p.uuid, p.org_id, p.owner_id, p.created_at, p.updated_at
FROM projects p
    INNER JOIN project_members pm ON pm.project_id = p.id
WHERE pm.user_id = $1
`

func (q *Queries) GetUserProjects(ctx context.Context, userID int64) ([]Project, error) {
	rows, err := q.db.Query(ctx, getUserProjects, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Uuid,
			&i.OrgID,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
