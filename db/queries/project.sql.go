// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: project.sql

package queries

import (
	"context"
)

const addProjectMember = `-- name: AddProjectMember :exec
INSERT INTO project_members(user_id, project_id)
VALUES ($1, $2)
`

type AddProjectMemberParams struct {
	UserID    int64
	ProjectID int64
}

func (q *Queries) AddProjectMember(ctx context.Context, arg AddProjectMemberParams) error {
	_, err := q.db.Exec(ctx, addProjectMember, arg.UserID, arg.ProjectID)
	return err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects(name, owner_id)
VALUES ($1, $2)
RETURNING id, name, owner_id, created_at, updated_at
`

type CreateProjectParams struct {
	Name    string
	OwnerID int64
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Name, arg.OwnerID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT id, name, owner_id, created_at, updated_at FROM projects WHERE id = $1
`

func (q *Queries) GetProject(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
