// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package queries

import (
	"context"
)

const createActiveUser = `-- name: CreateActiveUser :one
INSERT INTO users (name, email, password, email_verified, active)
VALUES ($1, $2, $3, TRUE, TRUE)
RETURNING uuid, id, name, email, password, email_verified, active, created_at
`

type CreateActiveUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"-"`
}

func (q *Queries) CreateActiveUser(ctx context.Context, arg CreateActiveUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createActiveUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT uuid, id, name, email, password, email_verified, active, created_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT uuid, id, name, email, password, email_verified, active, created_at
FROM users
WHERE uuid = $1
`

func (q *Queries) GetUserByUUID(ctx context.Context, uuid string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUUID, uuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}
