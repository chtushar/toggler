// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: apikeys.sql

package queries

import (
	"context"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys(name, api_key, allowed_domains, org_id, user_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING uuid, id, name, api_key, allowed_domains, org_id, user_id, created_at
`

type CreateAPIKeyParams struct {
	Name           string   `json:"name"`
	ApiKey         string   `json:"api_key"`
	AllowedDomains []string `json:"allowed_domains"`
	OrgID          *int32   `json:"-"`
	UserID         *int32   `json:"-"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.Name,
		arg.ApiKey,
		arg.AllowedDomains,
		arg.OrgID,
		arg.UserID,
	)
	var i ApiKey
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.Name,
		&i.ApiKey,
		&i.AllowedDomains,
		&i.OrgID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM api_keys
WHERE uuid = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, uuid)
	return err
}

const getOrganizationAPIKeys = `-- name: GetOrganizationAPIKeys :many
SELECT uuid, id, name, api_key, allowed_domains, org_id, user_id, created_at
FROM api_keys
WHERE org_id = $1
`

func (q *Queries) GetOrganizationAPIKeys(ctx context.Context, orgID *int32) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, getOrganizationAPIKeys, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.Uuid,
			&i.ID,
			&i.Name,
			&i.ApiKey,
			&i.AllowedDomains,
			&i.OrgID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
