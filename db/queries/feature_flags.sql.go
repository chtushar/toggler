// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: feature_flags.sql

package queries

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
)

const createFeatureFlag = `-- name: CreateFeatureFlag :one
INSERT INTO feature_flags(name, project_id, flag_type)
VALUES ($1, $2, $3)
RETURNING id, project_id, uuid, flag_type, name
`

type CreateFeatureFlagParams struct {
	Name      string          `json:"name"`
	ProjectID int64           `json:"project_id"`
	FlagType  FeatureFlagType `json:"flag_type"`
}

func (q *Queries) CreateFeatureFlag(ctx context.Context, arg CreateFeatureFlagParams) (FeatureFlag, error) {
	row := q.db.QueryRow(ctx, createFeatureFlag, arg.Name, arg.ProjectID, arg.FlagType)
	var i FeatureFlag
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Uuid,
		&i.FlagType,
		&i.Name,
	)
	return i, err
}

const createFeatureState = `-- name: CreateFeatureState :one
INSERT INTO feature_states(feature_flag_id, environment_id, enabled, value)
VALUES ($1, $2, $3, $4)
RETURNING id, uuid, environment_id, feature_flag_id, enabled, value, created_at, updated_at
`

type CreateFeatureStateParams struct {
	FeatureFlagID int64        `json:"feature_flag_id"`
	EnvironmentID int64        `json:"environment_id"`
	Enabled       bool         `json:"enabled"`
	Value         pgtype.JSONB `json:"value"`
}

func (q *Queries) CreateFeatureState(ctx context.Context, arg CreateFeatureStateParams) (FeatureState, error) {
	row := q.db.QueryRow(ctx, createFeatureState,
		arg.FeatureFlagID,
		arg.EnvironmentID,
		arg.Enabled,
		arg.Value,
	)
	var i FeatureState
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.EnvironmentID,
		&i.FeatureFlagID,
		&i.Enabled,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeatureFlags = `-- name: GetFeatureFlags :many
SELECT DISTINCT ff.id AS id,
    ff.uuid AS uuid,
    ff.flag_type AS flag_type,
    ff.name AS name,
    fs.enabled AS enabled,
    fs.value AS value
FROM feature_flags ff
    JOIN project_environments pe ON ff.project_id = pe.project_id
    JOIN environments env ON pe.environment_id = env.id
    JOIN projects p ON pe.project_id = p.id
    LEFT JOIN feature_states fs ON fs.environment_id = env.id
    AND fs.feature_flag_id = ff.id
WHERE p.uuid = $1
    AND $2::text = ANY(env.api_keys)
`

type GetFeatureFlagsParams struct {
	Uuid    string `json:"uuid"`
	Column2 string `json:"column_2"`
}

type GetFeatureFlagsRow struct {
	ID       int32           `json:"id"`
	Uuid     string          `json:"uuid"`
	FlagType FeatureFlagType `json:"flag_type"`
	Name     string          `json:"name"`
	Enabled  *bool           `json:"enabled"`
	Value    pgtype.JSONB    `json:"value"`
}

func (q *Queries) GetFeatureFlags(ctx context.Context, arg GetFeatureFlagsParams) ([]GetFeatureFlagsRow, error) {
	rows, err := q.db.Query(ctx, getFeatureFlags, arg.Uuid, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureFlagsRow
	for rows.Next() {
		var i GetFeatureFlagsRow
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.FlagType,
			&i.Name,
			&i.Enabled,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectFeatureFlags = `-- name: GetProjectFeatureFlags :many
SELECT ff.id,
    ff.uuid,
    ff.name,
    ff.flag_type,
    fs.enabled,
    fs.value,
    fs.updated_at
FROM feature_flags ff
    LEFT JOIN feature_states fs ON ff.id = fs.feature_flag_id
    AND fs.environment_id = $2
WHERE ff.project_id = $1
`

type GetProjectFeatureFlagsParams struct {
	ProjectID     int64 `json:"project_id"`
	EnvironmentID int64 `json:"environment_id"`
}

type GetProjectFeatureFlagsRow struct {
	ID        int32           `json:"id"`
	Uuid      string          `json:"uuid"`
	Name      string          `json:"name"`
	FlagType  FeatureFlagType `json:"flag_type"`
	Enabled   *bool           `json:"enabled"`
	Value     pgtype.JSONB    `json:"value"`
	UpdatedAt *time.Time      `json:"updated_at"`
}

func (q *Queries) GetProjectFeatureFlags(ctx context.Context, arg GetProjectFeatureFlagsParams) ([]GetProjectFeatureFlagsRow, error) {
	rows, err := q.db.Query(ctx, getProjectFeatureFlags, arg.ProjectID, arg.EnvironmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectFeatureFlagsRow
	for rows.Next() {
		var i GetProjectFeatureFlagsRow
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.FlagType,
			&i.Enabled,
			&i.Value,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleFeatureFlag = `-- name: ToggleFeatureFlag :one
UPDATE feature_states
SET enabled = NOT enabled
WHERE feature_flag_id = $1
RETURNING id, uuid, environment_id, feature_flag_id, enabled, value, created_at, updated_at
`

func (q *Queries) ToggleFeatureFlag(ctx context.Context, featureFlagID int64) (FeatureState, error) {
	row := q.db.QueryRow(ctx, toggleFeatureFlag, featureFlagID)
	var i FeatureState
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.EnvironmentID,
		&i.FeatureFlagID,
		&i.Enabled,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
