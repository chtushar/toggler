// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: feature_flags.sql

package queries

import (
	"context"

	"github.com/jackc/pgtype"
)

const createFeatureFlag = `-- name: CreateFeatureFlag :one
INSERT INTO feature_flags(name, project_id, flag_type)
VALUES ($1, $2, $3)
RETURNING id, project_id, uuid, flag_type, name
`

type CreateFeatureFlagParams struct {
	Name      string          `json:"name"`
	ProjectID int64           `json:"project_id"`
	FlagType  FeatureFlagType `json:"flag_type"`
}

func (q *Queries) CreateFeatureFlag(ctx context.Context, arg CreateFeatureFlagParams) (FeatureFlag, error) {
	row := q.db.QueryRow(ctx, createFeatureFlag, arg.Name, arg.ProjectID, arg.FlagType)
	var i FeatureFlag
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Uuid,
		&i.FlagType,
		&i.Name,
	)
	return i, err
}

const createFeatureState = `-- name: CreateFeatureState :one
INSERT INTO feature_states(feature_flag_id, environment_id, enabled, value)
VALUES ($1, $2, $3, $4)
RETURNING id, uuid, environment_id, feature_flag_id, enabled, value, created_at, updated_at
`

type CreateFeatureStateParams struct {
	FeatureFlagID int64        `json:"feature_flag_id"`
	EnvironmentID int64        `json:"environment_id"`
	Enabled       bool         `json:"enabled"`
	Value         pgtype.JSONB `json:"value"`
}

func (q *Queries) CreateFeatureState(ctx context.Context, arg CreateFeatureStateParams) (FeatureState, error) {
	row := q.db.QueryRow(ctx, createFeatureState,
		arg.FeatureFlagID,
		arg.EnvironmentID,
		arg.Enabled,
		arg.Value,
	)
	var i FeatureState
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.EnvironmentID,
		&i.FeatureFlagID,
		&i.Enabled,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
