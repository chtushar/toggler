// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: environment.sql

package queries

import (
	"context"
)

const createEnvironment = `-- name: CreateEnvironment :one
INSERT INTO environments(name, project_id, api_keys)
VALUES ($1, $2, $3)
RETURNING id, name, project_id, api_keys, uuid, created_at, updated_at
`

type CreateEnvironmentParams struct {
	Name      string   `json:"name"`
	ProjectID int64    `json:"project_id"`
	ApiKeys   []string `json:"api_keys"`
}

func (q *Queries) CreateEnvironment(ctx context.Context, arg CreateEnvironmentParams) (Environment, error) {
	row := q.db.QueryRow(ctx, createEnvironment, arg.Name, arg.ProjectID, arg.ApiKeys)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProjectID,
		&i.ApiKeys,
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectEnvironments = `-- name: GetProjectEnvironments :many
SELECT id, name, project_id, api_keys, uuid, created_at, updated_at
FROM environments
WHERE project_id = $1
`

func (q *Queries) GetProjectEnvironments(ctx context.Context, projectID int64) ([]Environment, error) {
	rows, err := q.db.Query(ctx, getProjectEnvironments, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Environment
	for rows.Next() {
		var i Environment
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProjectID,
			&i.ApiKeys,
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
