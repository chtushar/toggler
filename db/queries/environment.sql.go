// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: environment.sql

package queries

import (
	"context"
)

const createEnvironment = `-- name: CreateEnvironment :exec
INSERT INTO environments(name, color, org_id)
VALUES ($1, $2, $3)
`

type CreateEnvironmentParams struct {
	Name  string  `json:"name"`
	Color *string `json:"color"`
	OrgID *int32  `json:"-"`
}

func (q *Queries) CreateEnvironment(ctx context.Context, arg CreateEnvironmentParams) error {
	_, err := q.db.Exec(ctx, createEnvironment, arg.Name, arg.Color, arg.OrgID)
	return err
}

const getEnvironmentByUUID = `-- name: GetEnvironmentByUUID :one
SELECT uuid, id, name, color, org_id, created_at FROM environments WHERE uuid = $1
`

func (q *Queries) GetEnvironmentByUUID(ctx context.Context, uuid string) (Environment, error) {
	row := q.db.QueryRow(ctx, getEnvironmentByUUID, uuid)
	var i Environment
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.Name,
		&i.Color,
		&i.OrgID,
		&i.CreatedAt,
	)
	return i, err
}

const getOrganizationEnvironments = `-- name: GetOrganizationEnvironments :many
SELECT uuid, id, name, color, org_id, created_at
FROM environments
WHERE org_id = $1
`

func (q *Queries) GetOrganizationEnvironments(ctx context.Context, orgID *int32) ([]Environment, error) {
	rows, err := q.db.Query(ctx, getOrganizationEnvironments, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Environment
	for rows.Next() {
		var i Environment
		if err := rows.Scan(
			&i.Uuid,
			&i.ID,
			&i.Name,
			&i.Color,
			&i.OrgID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEnvironmentColor = `-- name: UpdateEnvironmentColor :exec
UPDATE environments
SET color = $2
WHERE uuid = $1
`

type UpdateEnvironmentColorParams struct {
	Uuid  string  `json:"uuid"`
	Color *string `json:"color"`
}

func (q *Queries) UpdateEnvironmentColor(ctx context.Context, arg UpdateEnvironmentColorParams) error {
	_, err := q.db.Exec(ctx, updateEnvironmentColor, arg.Uuid, arg.Color)
	return err
}

const updateEnvironmentName = `-- name: UpdateEnvironmentName :exec
UPDATE environments
SET name = $2
WHERE uuid = $1
`

type UpdateEnvironmentNameParams struct {
	Uuid string `json:"uuid"`
	Name string `json:"name"`
}

func (q *Queries) UpdateEnvironmentName(ctx context.Context, arg UpdateEnvironmentNameParams) error {
	_, err := q.db.Exec(ctx, updateEnvironmentName, arg.Uuid, arg.Name)
	return err
}
