// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: folder.sql

package queries

import (
	"context"
)

const createFolder = `-- name: CreateFolder :one
INSERT INTO folders(name, org_id)
VALUES ($1, $2)
RETURNING uuid, id, name, org_id, created_at
`

type CreateFolderParams struct {
	Name  string `json:"name"`
	OrgID *int32 `json:"-"`
}

func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) (Folder, error) {
	row := q.db.QueryRow(ctx, createFolder, arg.Name, arg.OrgID)
	var i Folder
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.Name,
		&i.OrgID,
		&i.CreatedAt,
	)
	return i, err
}

const getFolderByUUID = `-- name: GetFolderByUUID :one
SELECT uuid, id, name, org_id, created_at
FROM folders
WHERE org_id = $1
`

func (q *Queries) GetFolderByUUID(ctx context.Context, orgID *int32) (Folder, error) {
	row := q.db.QueryRow(ctx, getFolderByUUID, orgID)
	var i Folder
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.Name,
		&i.OrgID,
		&i.CreatedAt,
	)
	return i, err
}

const getOrgFolders = `-- name: GetOrgFolders :many
SELECT uuid, id, name, org_id, created_at
FROM folders
WHERE org_id = $1
`

func (q *Queries) GetOrgFolders(ctx context.Context, orgID *int32) ([]Folder, error) {
	rows, err := q.db.Query(ctx, getOrgFolders, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Folder
	for rows.Next() {
		var i Folder
		if err := rows.Scan(
			&i.Uuid,
			&i.ID,
			&i.Name,
			&i.OrgID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFolderName = `-- name: UpdateFolderName :exec
UPDATE folders
SET name = $1
WHERE uuid = $2
`

type UpdateFolderNameParams struct {
	Name string `json:"name"`
	Uuid string `json:"uuid"`
}

func (q *Queries) UpdateFolderName(ctx context.Context, arg UpdateFolderNameParams) error {
	_, err := q.db.Exec(ctx, updateFolderName, arg.Name, arg.Uuid)
	return err
}
