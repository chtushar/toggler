// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: organization.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const addOrganizationMember = `-- name: AddOrganizationMember :exec
INSERT INTO organization_members(user_uuid, org_uuid)
VALUES ($1, $2)
RETURNING user_uuid, org_uuid
`

type AddOrganizationMemberParams struct {
	UserUuid *uuid.UUID `json:"user_uuid"`
	OrgUuid  *uuid.UUID `json:"org_uuid"`
}

func (q *Queries) AddOrganizationMember(ctx context.Context, arg AddOrganizationMemberParams) error {
	_, err := q.db.Exec(ctx, addOrganizationMember, arg.UserUuid, arg.OrgUuid)
	return err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations(name)
VALUES ($1)
RETURNING uuid, name, created_at
`

func (q *Queries) CreateOrganization(ctx context.Context, name string) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization, name)
	var i Organization
	err := row.Scan(&i.Uuid, &i.Name, &i.CreatedAt)
	return i, err
}

const getOrganizationByUUID = `-- name: GetOrganizationByUUID :one
SELECT uuid, name, created_at
FROM organizations
WHERE uuid = $1
`

func (q *Queries) GetOrganizationByUUID(ctx context.Context, argUuid string) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByUUID, argUuid)
	var i Organization
	err := row.Scan(&i.Uuid, &i.Name, &i.CreatedAt)
	return i, err
}
