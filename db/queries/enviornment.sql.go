// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: enviornment.sql

package queries

import (
	"context"
)

const addProdAndDevProjectEnviornments = `-- name: AddProdAndDevProjectEnviornments :exec
INSERT INTO project_enviornments(project_id, environment_id)
VALUES ($1, $2), ($1, $3)
`

type AddProdAndDevProjectEnviornmentsParams struct {
	ProjectID       int64 `json:"project_id"`
	EnvironmentID   int64 `json:"environment_id"`
	EnvironmentID_2 int64 `json:"environment_id_2"`
}

func (q *Queries) AddProdAndDevProjectEnviornments(ctx context.Context, arg AddProdAndDevProjectEnviornmentsParams) error {
	_, err := q.db.Exec(ctx, addProdAndDevProjectEnviornments, arg.ProjectID, arg.EnvironmentID, arg.EnvironmentID_2)
	return err
}

const addProjectEnvironment = `-- name: AddProjectEnvironment :exec
INSERT INTO project_enviornments(project_id, environment_id)
VALUES ($1, $2)
`

type AddProjectEnvironmentParams struct {
	ProjectID     int64 `json:"project_id"`
	EnvironmentID int64 `json:"environment_id"`
}

func (q *Queries) AddProjectEnvironment(ctx context.Context, arg AddProjectEnvironmentParams) error {
	_, err := q.db.Exec(ctx, addProjectEnvironment, arg.ProjectID, arg.EnvironmentID)
	return err
}

const createEnvironment = `-- name: CreateEnvironment :one
INSERT INTO environments(name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateEnvironment(ctx context.Context, name string) (Environment, error) {
	row := q.db.QueryRow(ctx, createEnvironment, name)
	var i Environment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProdAndDevEnvironments = `-- name: CreateProdAndDevEnvironments :many
INSERT INTO environments(name)
VALUES ('production'), ('development')
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateProdAndDevEnvironments(ctx context.Context) ([]Environment, error) {
	rows, err := q.db.Query(ctx, createProdAndDevEnvironments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Environment
	for rows.Next() {
		var i Environment
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
