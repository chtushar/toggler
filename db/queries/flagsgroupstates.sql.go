// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: flagsgroupstates.sql

package queries

import (
	"context"
)

const createFlagsGroupState = `-- name: CreateFlagsGroupState :one
INSERT INTO flags_group_states(flags_group_id, environment_id)
VALUES ($1, $2)
RETURNING uuid, id, flags_group_id, js, environment_id, created_at
`

type CreateFlagsGroupStateParams struct {
	FlagsGroupID  *int32 `json:"-"`
	EnvironmentID *int32 `json:"-"`
}

func (q *Queries) CreateFlagsGroupState(ctx context.Context, arg CreateFlagsGroupStateParams) (FlagsGroupState, error) {
	row := q.db.QueryRow(ctx, createFlagsGroupState, arg.FlagsGroupID, arg.EnvironmentID)
	var i FlagsGroupState
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.FlagsGroupID,
		&i.Js,
		&i.EnvironmentID,
		&i.CreatedAt,
	)
	return i, err
}

const getFlagsGroupState = `-- name: GetFlagsGroupState :one
SELECT uuid, id, flags_group_id, js, environment_id, created_at
FROM flags_group_states
WHERE flags_group_id = $1
    AND environment_id = $2
`

type GetFlagsGroupStateParams struct {
	FlagsGroupID  *int32 `json:"-"`
	EnvironmentID *int32 `json:"-"`
}

func (q *Queries) GetFlagsGroupState(ctx context.Context, arg GetFlagsGroupStateParams) (FlagsGroupState, error) {
	row := q.db.QueryRow(ctx, getFlagsGroupState, arg.FlagsGroupID, arg.EnvironmentID)
	var i FlagsGroupState
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.FlagsGroupID,
		&i.Js,
		&i.EnvironmentID,
		&i.CreatedAt,
	)
	return i, err
}

const getFlagsGroupStateByUUID = `-- name: GetFlagsGroupStateByUUID :one
SELECT uuid, id, flags_group_id, js, environment_id, created_at
FROM flags_group_states
WHERE uuid = $1
`

func (q *Queries) GetFlagsGroupStateByUUID(ctx context.Context, uuid string) (FlagsGroupState, error) {
	row := q.db.QueryRow(ctx, getFlagsGroupStateByUUID, uuid)
	var i FlagsGroupState
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.FlagsGroupID,
		&i.Js,
		&i.EnvironmentID,
		&i.CreatedAt,
	)
	return i, err
}

const updateFlagGroupsStateJS = `-- name: UpdateFlagGroupsStateJS :one
UPDATE flags_group_states
SET js = $1
WHERE flags_group_id = $2
    AND environment_id = $3
RETURNING uuid, id, flags_group_id, js, environment_id, created_at
`

type UpdateFlagGroupsStateJSParams struct {
	Js            *string `json:"js"`
	FlagsGroupID  *int32  `json:"-"`
	EnvironmentID *int32  `json:"-"`
}

func (q *Queries) UpdateFlagGroupsStateJS(ctx context.Context, arg UpdateFlagGroupsStateJSParams) (FlagsGroupState, error) {
	row := q.db.QueryRow(ctx, updateFlagGroupsStateJS, arg.Js, arg.FlagsGroupID, arg.EnvironmentID)
	var i FlagsGroupState
	err := row.Scan(
		&i.Uuid,
		&i.ID,
		&i.FlagsGroupID,
		&i.Js,
		&i.EnvironmentID,
		&i.CreatedAt,
	)
	return i, err
}
